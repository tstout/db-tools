import org.h2.tools.Server

apply plugin: 'java'
apply plugin: 'liquibase'
//apply from: 'database.gradle'
apply plugin: 'maven-publish'

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.tstout'
            artifactId 'db-io'
            version '0.0.1'

            from components.java

            artifact sourceJar {
                classifier "source"
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.augusttechgroup:gradle-liquibase-plugin:0.7'
        classpath 'com.h2database:h2:1.3.167'
    }
}

dependencies {
    compile(project.libraries.runtime_core, 'com.h2database:h2:1.3.167')
    testCompile(project.libraries.test_core)
}

test {
    useJUnit {
        includeCategories 'db.io.UnitTests'
    }
}

liquibase {
    changelogs {
        main {
//            file = file('src/test/java/db/io/test-changelog.groovy')
            file = file('src/test/java/db/io/test-changelog.sql')
        }
    }

    databases {
        dbio_test {
            url = 'jdbc:h2:tcp://127.0.0.1/~/.dbio/dbio-test'
            username = 'sa'
            password = ''
        }
    }

    defaultDatabase = databases.dbio_test
}

task startH2 << {
        println 'starting h2....'
        def server = Server.createTcpServer((String[])[])
        server.start()
        println "H2: ${server.status}"
}

//task integrationTest(dependsOn: startH2, type: Test) {
task integrationTest(type: Test) {
    useJUnit {
        includeCategories 'db.io.IntegrationTests'
        excludeCategories 'db.io.UnitTests'
    }
}


//
// Run minitest...
//
task(minitest, dependsOn: "classes gems".split(), type: JavaExec) {
    configure jrubyCommon
    description = 'Run minitest via jruby'
    args = ['--2.0', 'src/test/ruby/db/io/test_query.rb']
}

//task stopH2 {
//    mustRunAfter 'integrationTest'
//    doLast {
//        println 'Stopping H2...'
//        def server = Server.createTcpServer((String[])[])
//        server.stop()
//        println "stopped H2 Server"
//    }
//}

//task wrapper(type: Wrapper) {
//    gradleVersion = '1.2'
//}




